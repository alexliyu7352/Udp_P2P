// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: udpp2p.proto

#ifndef PROTOBUF_INCLUDED_udpp2p_2eproto
#define PROTOBUF_INCLUDED_udpp2p_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_udpp2p_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_udpp2p_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_udpp2p_2eproto();
namespace udpp2p {
class AddrTuple;
class AddrTupleDefaultTypeInternal;
extern AddrTupleDefaultTypeInternal _AddrTuple_default_instance_;
class CltReq;
class CltReqDefaultTypeInternal;
extern CltReqDefaultTypeInternal _CltReq_default_instance_;
class SrvRsp;
class SrvRspDefaultTypeInternal;
extern SrvRspDefaultTypeInternal _SrvRsp_default_instance_;
}  // namespace udpp2p
namespace google {
namespace protobuf {
template<> ::udpp2p::AddrTuple* Arena::CreateMaybeMessage<::udpp2p::AddrTuple>(Arena*);
template<> ::udpp2p::CltReq* Arena::CreateMaybeMessage<::udpp2p::CltReq>(Arena*);
template<> ::udpp2p::SrvRsp* Arena::CreateMaybeMessage<::udpp2p::SrvRsp>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace udpp2p {

enum MsgType {
  PING = 0,
  PONG = 1,
  LINKREQ = 2,
  LINKRSP = 3,
  P2PREQ = 4,
  P2PRSP = 5,
  PULL = 6,
  PUSH = 7
};
bool MsgType_IsValid(int value);
const MsgType MsgType_MIN = PING;
const MsgType MsgType_MAX = PUSH;
const int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgType_descriptor();
inline const ::std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgType_descriptor(), value);
}
inline bool MsgType_Parse(
    const ::std::string& name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
// ===================================================================

class AddrTuple :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:udpp2p.AddrTuple) */ {
 public:
  AddrTuple();
  virtual ~AddrTuple();

  AddrTuple(const AddrTuple& from);

  inline AddrTuple& operator=(const AddrTuple& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddrTuple(AddrTuple&& from) noexcept
    : AddrTuple() {
    *this = ::std::move(from);
  }

  inline AddrTuple& operator=(AddrTuple&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AddrTuple& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddrTuple* internal_default_instance() {
    return reinterpret_cast<const AddrTuple*>(
               &_AddrTuple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AddrTuple* other);
  friend void swap(AddrTuple& a, AddrTuple& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddrTuple* New() const final {
    return CreateMaybeMessage<AddrTuple>(nullptr);
  }

  AddrTuple* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddrTuple>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddrTuple& from);
  void MergeFrom(const AddrTuple& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddrTuple* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string addr = 1;
  bool has_addr() const;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // required uint64 sessionId = 3;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIdFieldNumber = 3;
  ::google::protobuf::uint64 sessionid() const;
  void set_sessionid(::google::protobuf::uint64 value);

  // required uint32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:udpp2p.AddrTuple)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::uint64 sessionid_;
  ::google::protobuf::uint32 port_;
  friend struct ::TableStruct_udpp2p_2eproto;
};
// -------------------------------------------------------------------

class SrvRsp :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:udpp2p.SrvRsp) */ {
 public:
  SrvRsp();
  virtual ~SrvRsp();

  SrvRsp(const SrvRsp& from);

  inline SrvRsp& operator=(const SrvRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SrvRsp(SrvRsp&& from) noexcept
    : SrvRsp() {
    *this = ::std::move(from);
  }

  inline SrvRsp& operator=(SrvRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SrvRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SrvRsp* internal_default_instance() {
    return reinterpret_cast<const SrvRsp*>(
               &_SrvRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SrvRsp* other);
  friend void swap(SrvRsp& a, SrvRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SrvRsp* New() const final {
    return CreateMaybeMessage<SrvRsp>(nullptr);
  }

  SrvRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SrvRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SrvRsp& from);
  void MergeFrom(const SrvRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SrvRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .udpp2p.AddrTuple addrs = 2;
  int addrs_size() const;
  void clear_addrs();
  static const int kAddrsFieldNumber = 2;
  ::udpp2p::AddrTuple* mutable_addrs(int index);
  ::google::protobuf::RepeatedPtrField< ::udpp2p::AddrTuple >*
      mutable_addrs();
  const ::udpp2p::AddrTuple& addrs(int index) const;
  ::udpp2p::AddrTuple* add_addrs();
  const ::google::protobuf::RepeatedPtrField< ::udpp2p::AddrTuple >&
      addrs() const;

  // optional string message = 4;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 4;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional uint64 sessionId = 3;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIdFieldNumber = 3;
  ::google::protobuf::uint64 sessionid() const;
  void set_sessionid(::google::protobuf::uint64 value);

  // required .udpp2p.MsgType type = 1 [default = PONG];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::udpp2p::MsgType type() const;
  void set_type(::udpp2p::MsgType value);

  // @@protoc_insertion_point(class_scope:udpp2p.SrvRsp)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::udpp2p::AddrTuple > addrs_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::uint64 sessionid_;
  int type_;
  friend struct ::TableStruct_udpp2p_2eproto;
};
// -------------------------------------------------------------------

class CltReq :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:udpp2p.CltReq) */ {
 public:
  CltReq();
  virtual ~CltReq();

  CltReq(const CltReq& from);

  inline CltReq& operator=(const CltReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CltReq(CltReq&& from) noexcept
    : CltReq() {
    *this = ::std::move(from);
  }

  inline CltReq& operator=(CltReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CltReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CltReq* internal_default_instance() {
    return reinterpret_cast<const CltReq*>(
               &_CltReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CltReq* other);
  friend void swap(CltReq& a, CltReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CltReq* New() const final {
    return CreateMaybeMessage<CltReq>(nullptr);
  }

  CltReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CltReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CltReq& from);
  void MergeFrom(const CltReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CltReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .udpp2p.AddrTuple addrs = 2;
  int addrs_size() const;
  void clear_addrs();
  static const int kAddrsFieldNumber = 2;
  ::udpp2p::AddrTuple* mutable_addrs(int index);
  ::google::protobuf::RepeatedPtrField< ::udpp2p::AddrTuple >*
      mutable_addrs();
  const ::udpp2p::AddrTuple& addrs(int index) const;
  ::udpp2p::AddrTuple* add_addrs();
  const ::google::protobuf::RepeatedPtrField< ::udpp2p::AddrTuple >&
      addrs() const;

  // optional string message = 4;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 4;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional uint64 sessionId = 3;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIdFieldNumber = 3;
  ::google::protobuf::uint64 sessionid() const;
  void set_sessionid(::google::protobuf::uint64 value);

  // required .udpp2p.MsgType type = 1 [default = PING];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::udpp2p::MsgType type() const;
  void set_type(::udpp2p::MsgType value);

  // @@protoc_insertion_point(class_scope:udpp2p.CltReq)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::udpp2p::AddrTuple > addrs_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::uint64 sessionid_;
  int type_;
  friend struct ::TableStruct_udpp2p_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddrTuple

// required string addr = 1;
inline bool AddrTuple::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddrTuple::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& AddrTuple::addr() const {
  // @@protoc_insertion_point(field_get:udpp2p.AddrTuple.addr)
  return addr_.GetNoArena();
}
inline void AddrTuple::set_addr(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:udpp2p.AddrTuple.addr)
}
#if LANG_CXX11
inline void AddrTuple::set_addr(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:udpp2p.AddrTuple.addr)
}
#endif
inline void AddrTuple::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:udpp2p.AddrTuple.addr)
}
inline void AddrTuple::set_addr(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:udpp2p.AddrTuple.addr)
}
inline ::std::string* AddrTuple::mutable_addr() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:udpp2p.AddrTuple.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddrTuple::release_addr() {
  // @@protoc_insertion_point(field_release:udpp2p.AddrTuple.addr)
  if (!has_addr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return addr_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddrTuple::set_allocated_addr(::std::string* addr) {
  if (addr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:udpp2p.AddrTuple.addr)
}

// required uint32 port = 2;
inline bool AddrTuple::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddrTuple::clear_port() {
  port_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 AddrTuple::port() const {
  // @@protoc_insertion_point(field_get:udpp2p.AddrTuple.port)
  return port_;
}
inline void AddrTuple::set_port(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  port_ = value;
  // @@protoc_insertion_point(field_set:udpp2p.AddrTuple.port)
}

// required uint64 sessionId = 3;
inline bool AddrTuple::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddrTuple::clear_sessionid() {
  sessionid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 AddrTuple::sessionid() const {
  // @@protoc_insertion_point(field_get:udpp2p.AddrTuple.sessionId)
  return sessionid_;
}
inline void AddrTuple::set_sessionid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:udpp2p.AddrTuple.sessionId)
}

// -------------------------------------------------------------------

// SrvRsp

// required .udpp2p.MsgType type = 1 [default = PONG];
inline bool SrvRsp::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SrvRsp::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::udpp2p::MsgType SrvRsp::type() const {
  // @@protoc_insertion_point(field_get:udpp2p.SrvRsp.type)
  return static_cast< ::udpp2p::MsgType >(type_);
}
inline void SrvRsp::set_type(::udpp2p::MsgType value) {
  assert(::udpp2p::MsgType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
  // @@protoc_insertion_point(field_set:udpp2p.SrvRsp.type)
}

// repeated .udpp2p.AddrTuple addrs = 2;
inline int SrvRsp::addrs_size() const {
  return addrs_.size();
}
inline void SrvRsp::clear_addrs() {
  addrs_.Clear();
}
inline ::udpp2p::AddrTuple* SrvRsp::mutable_addrs(int index) {
  // @@protoc_insertion_point(field_mutable:udpp2p.SrvRsp.addrs)
  return addrs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::udpp2p::AddrTuple >*
SrvRsp::mutable_addrs() {
  // @@protoc_insertion_point(field_mutable_list:udpp2p.SrvRsp.addrs)
  return &addrs_;
}
inline const ::udpp2p::AddrTuple& SrvRsp::addrs(int index) const {
  // @@protoc_insertion_point(field_get:udpp2p.SrvRsp.addrs)
  return addrs_.Get(index);
}
inline ::udpp2p::AddrTuple* SrvRsp::add_addrs() {
  // @@protoc_insertion_point(field_add:udpp2p.SrvRsp.addrs)
  return addrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::udpp2p::AddrTuple >&
SrvRsp::addrs() const {
  // @@protoc_insertion_point(field_list:udpp2p.SrvRsp.addrs)
  return addrs_;
}

// optional uint64 sessionId = 3;
inline bool SrvRsp::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SrvRsp::clear_sessionid() {
  sessionid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 SrvRsp::sessionid() const {
  // @@protoc_insertion_point(field_get:udpp2p.SrvRsp.sessionId)
  return sessionid_;
}
inline void SrvRsp::set_sessionid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:udpp2p.SrvRsp.sessionId)
}

// optional string message = 4;
inline bool SrvRsp::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SrvRsp::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& SrvRsp::message() const {
  // @@protoc_insertion_point(field_get:udpp2p.SrvRsp.message)
  return message_.GetNoArena();
}
inline void SrvRsp::set_message(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:udpp2p.SrvRsp.message)
}
#if LANG_CXX11
inline void SrvRsp::set_message(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:udpp2p.SrvRsp.message)
}
#endif
inline void SrvRsp::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:udpp2p.SrvRsp.message)
}
inline void SrvRsp::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:udpp2p.SrvRsp.message)
}
inline ::std::string* SrvRsp::mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:udpp2p.SrvRsp.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SrvRsp::release_message() {
  // @@protoc_insertion_point(field_release:udpp2p.SrvRsp.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrvRsp::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:udpp2p.SrvRsp.message)
}

// -------------------------------------------------------------------

// CltReq

// required .udpp2p.MsgType type = 1 [default = PING];
inline bool CltReq::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CltReq::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::udpp2p::MsgType CltReq::type() const {
  // @@protoc_insertion_point(field_get:udpp2p.CltReq.type)
  return static_cast< ::udpp2p::MsgType >(type_);
}
inline void CltReq::set_type(::udpp2p::MsgType value) {
  assert(::udpp2p::MsgType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
  // @@protoc_insertion_point(field_set:udpp2p.CltReq.type)
}

// repeated .udpp2p.AddrTuple addrs = 2;
inline int CltReq::addrs_size() const {
  return addrs_.size();
}
inline void CltReq::clear_addrs() {
  addrs_.Clear();
}
inline ::udpp2p::AddrTuple* CltReq::mutable_addrs(int index) {
  // @@protoc_insertion_point(field_mutable:udpp2p.CltReq.addrs)
  return addrs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::udpp2p::AddrTuple >*
CltReq::mutable_addrs() {
  // @@protoc_insertion_point(field_mutable_list:udpp2p.CltReq.addrs)
  return &addrs_;
}
inline const ::udpp2p::AddrTuple& CltReq::addrs(int index) const {
  // @@protoc_insertion_point(field_get:udpp2p.CltReq.addrs)
  return addrs_.Get(index);
}
inline ::udpp2p::AddrTuple* CltReq::add_addrs() {
  // @@protoc_insertion_point(field_add:udpp2p.CltReq.addrs)
  return addrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::udpp2p::AddrTuple >&
CltReq::addrs() const {
  // @@protoc_insertion_point(field_list:udpp2p.CltReq.addrs)
  return addrs_;
}

// optional uint64 sessionId = 3;
inline bool CltReq::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltReq::clear_sessionid() {
  sessionid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CltReq::sessionid() const {
  // @@protoc_insertion_point(field_get:udpp2p.CltReq.sessionId)
  return sessionid_;
}
inline void CltReq::set_sessionid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:udpp2p.CltReq.sessionId)
}

// optional string message = 4;
inline bool CltReq::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltReq::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CltReq::message() const {
  // @@protoc_insertion_point(field_get:udpp2p.CltReq.message)
  return message_.GetNoArena();
}
inline void CltReq::set_message(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:udpp2p.CltReq.message)
}
#if LANG_CXX11
inline void CltReq::set_message(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:udpp2p.CltReq.message)
}
#endif
inline void CltReq::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:udpp2p.CltReq.message)
}
inline void CltReq::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:udpp2p.CltReq.message)
}
inline ::std::string* CltReq::mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:udpp2p.CltReq.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CltReq::release_message() {
  // @@protoc_insertion_point(field_release:udpp2p.CltReq.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CltReq::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:udpp2p.CltReq.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace udpp2p

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::udpp2p::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::udpp2p::MsgType>() {
  return ::udpp2p::MsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_udpp2p_2eproto
