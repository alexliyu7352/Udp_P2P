// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: udpp2p.proto

#include "udpp2p.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_udpp2p_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AddrTuple_udpp2p_2eproto;
namespace udpp2p {
class AddrTupleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddrTuple> _instance;
} _AddrTuple_default_instance_;
class SrvRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SrvRsp> _instance;
} _SrvRsp_default_instance_;
class CltReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CltReq> _instance;
} _CltReq_default_instance_;
}  // namespace udpp2p
static void InitDefaultsAddrTuple_udpp2p_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::udpp2p::_AddrTuple_default_instance_;
    new (ptr) ::udpp2p::AddrTuple();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::udpp2p::AddrTuple::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AddrTuple_udpp2p_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddrTuple_udpp2p_2eproto}, {}};

static void InitDefaultsSrvRsp_udpp2p_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::udpp2p::_SrvRsp_default_instance_;
    new (ptr) ::udpp2p::SrvRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::udpp2p::SrvRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SrvRsp_udpp2p_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSrvRsp_udpp2p_2eproto}, {
      &scc_info_AddrTuple_udpp2p_2eproto.base,}};

static void InitDefaultsCltReq_udpp2p_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::udpp2p::_CltReq_default_instance_;
    new (ptr) ::udpp2p::CltReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::udpp2p::CltReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CltReq_udpp2p_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCltReq_udpp2p_2eproto}, {
      &scc_info_AddrTuple_udpp2p_2eproto.base,}};

void InitDefaults_udpp2p_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_AddrTuple_udpp2p_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SrvRsp_udpp2p_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CltReq_udpp2p_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_udpp2p_2eproto[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_udpp2p_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_udpp2p_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_udpp2p_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::udpp2p::AddrTuple, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::udpp2p::AddrTuple, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::udpp2p::AddrTuple, addr_),
  PROTOBUF_FIELD_OFFSET(::udpp2p::AddrTuple, port_),
  PROTOBUF_FIELD_OFFSET(::udpp2p::AddrTuple, sessionid_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::udpp2p::SrvRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::udpp2p::SrvRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::udpp2p::SrvRsp, type_),
  PROTOBUF_FIELD_OFFSET(::udpp2p::SrvRsp, addrs_),
  PROTOBUF_FIELD_OFFSET(::udpp2p::SrvRsp, sessionid_),
  PROTOBUF_FIELD_OFFSET(::udpp2p::SrvRsp, message_),
  2,
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::udpp2p::CltReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::udpp2p::CltReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::udpp2p::CltReq, type_),
  PROTOBUF_FIELD_OFFSET(::udpp2p::CltReq, addrs_),
  PROTOBUF_FIELD_OFFSET(::udpp2p::CltReq, sessionid_),
  PROTOBUF_FIELD_OFFSET(::udpp2p::CltReq, message_),
  2,
  ~0u,
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::udpp2p::AddrTuple)},
  { 11, 20, sizeof(::udpp2p::SrvRsp)},
  { 24, 33, sizeof(::udpp2p::CltReq)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::udpp2p::_AddrTuple_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::udpp2p::_SrvRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::udpp2p::_CltReq_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_udpp2p_2eproto = {
  {}, AddDescriptors_udpp2p_2eproto, "udpp2p.proto", schemas,
  file_default_instances, TableStruct_udpp2p_2eproto::offsets,
  file_level_metadata_udpp2p_2eproto, 3, file_level_enum_descriptors_udpp2p_2eproto, file_level_service_descriptors_udpp2p_2eproto,
};

const char descriptor_table_protodef_udpp2p_2eproto[] =
  "\n\014udpp2p.proto\022\006udpp2p\":\n\tAddrTuple\022\014\n\004a"
  "ddr\030\001 \002(\t\022\014\n\004port\030\002 \002(\r\022\021\n\tsessionId\030\003 \002"
  "(\004\"s\n\006SrvRsp\022#\n\004type\030\001 \002(\0162\017.udpp2p.MsgT"
  "ype:\004PONG\022 \n\005addrs\030\002 \003(\0132\021.udpp2p.AddrTu"
  "ple\022\021\n\tsessionId\030\003 \001(\004\022\017\n\007message\030\004 \001(\t\""
  "s\n\006CltReq\022#\n\004type\030\001 \002(\0162\017.udpp2p.MsgType"
  ":\004PING\022 \n\005addrs\030\002 \003(\0132\021.udpp2p.AddrTuple"
  "\022\021\n\tsessionId\030\003 \001(\004\022\017\n\007message\030\004 \001(\t*c\n\007"
  "MsgType\022\010\n\004PING\020\000\022\010\n\004PONG\020\001\022\013\n\007LINKREQ\020\002"
  "\022\013\n\007LINKRSP\020\003\022\n\n\006P2PREQ\020\004\022\n\n\006P2PRSP\020\005\022\010\n"
  "\004PULL\020\006\022\010\n\004PUSH\020\007"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_udpp2p_2eproto = {
  false, InitDefaults_udpp2p_2eproto, 
  descriptor_table_protodef_udpp2p_2eproto,
  "udpp2p.proto", &assign_descriptors_table_udpp2p_2eproto, 417,
};

void AddDescriptors_udpp2p_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_udpp2p_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_udpp2p_2eproto = []() { AddDescriptors_udpp2p_2eproto(); return true; }();
namespace udpp2p {
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_udpp2p_2eproto);
  return file_level_enum_descriptors_udpp2p_2eproto[0];
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AddrTuple::InitAsDefaultInstance() {
}
class AddrTuple::HasBitSetters {
 public:
  static void set_has_addr(AddrTuple* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_port(AddrTuple* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_sessionid(AddrTuple* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddrTuple::kAddrFieldNumber;
const int AddrTuple::kPortFieldNumber;
const int AddrTuple::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddrTuple::AddrTuple()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:udpp2p.AddrTuple)
}
AddrTuple::AddrTuple(const AddrTuple& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_addr()) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  ::memcpy(&sessionid_, &from.sessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:udpp2p.AddrTuple)
}

void AddrTuple::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AddrTuple_udpp2p_2eproto.base);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&sessionid_)) + sizeof(port_));
}

AddrTuple::~AddrTuple() {
  // @@protoc_insertion_point(destructor:udpp2p.AddrTuple)
  SharedDtor();
}

void AddrTuple::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AddrTuple::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddrTuple& AddrTuple::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AddrTuple_udpp2p_2eproto.base);
  return *internal_default_instance();
}


void AddrTuple::Clear() {
// @@protoc_insertion_point(message_clear_start:udpp2p.AddrTuple)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    addr_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&sessionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&port_) -
        reinterpret_cast<char*>(&sessionid_)) + sizeof(port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddrTuple::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AddrTuple*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required string addr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("udpp2p.AddrTuple.addr");
        object = msg->mutable_addr();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // required uint32 port = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint64 sessionId = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_sessionid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddrTuple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:udpp2p.AddrTuple)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "udpp2p.AddrTuple.addr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 sessionId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_sessionid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:udpp2p.AddrTuple)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:udpp2p.AddrTuple)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddrTuple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:udpp2p.AddrTuple)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "udpp2p.AddrTuple.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addr(), output);
  }

  // required uint32 port = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // required uint64 sessionId = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sessionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:udpp2p.AddrTuple)
}

::google::protobuf::uint8* AddrTuple::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:udpp2p.AddrTuple)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "udpp2p.AddrTuple.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  // required uint32 port = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // required uint64 sessionId = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sessionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:udpp2p.AddrTuple)
  return target;
}

size_t AddrTuple::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:udpp2p.AddrTuple)
  size_t total_size = 0;

  if (has_addr()) {
    // required string addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  if (has_sessionid()) {
    // required uint64 sessionId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sessionid());
  }

  if (has_port()) {
    // required uint32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  return total_size;
}
size_t AddrTuple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:udpp2p.AddrTuple)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());

    // required uint64 sessionId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sessionid());

    // required uint32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddrTuple::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:udpp2p.AddrTuple)
  GOOGLE_DCHECK_NE(&from, this);
  const AddrTuple* source =
      ::google::protobuf::DynamicCastToGenerated<AddrTuple>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:udpp2p.AddrTuple)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:udpp2p.AddrTuple)
    MergeFrom(*source);
  }
}

void AddrTuple::MergeFrom(const AddrTuple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:udpp2p.AddrTuple)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
    }
    if (cached_has_bits & 0x00000002u) {
      sessionid_ = from.sessionid_;
    }
    if (cached_has_bits & 0x00000004u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddrTuple::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:udpp2p.AddrTuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddrTuple::CopyFrom(const AddrTuple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:udpp2p.AddrTuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddrTuple::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void AddrTuple::Swap(AddrTuple* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddrTuple::InternalSwap(AddrTuple* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  addr_.Swap(&other->addr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sessionid_, other->sessionid_);
  swap(port_, other->port_);
}

::google::protobuf::Metadata AddrTuple::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_udpp2p_2eproto);
  return ::file_level_metadata_udpp2p_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SrvRsp::InitAsDefaultInstance() {
}
class SrvRsp::HasBitSetters {
 public:
  static void set_has_type(SrvRsp* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_sessionid(SrvRsp* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_message(SrvRsp* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SrvRsp::kTypeFieldNumber;
const int SrvRsp::kAddrsFieldNumber;
const int SrvRsp::kSessionIdFieldNumber;
const int SrvRsp::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SrvRsp::SrvRsp()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:udpp2p.SrvRsp)
}
SrvRsp::SrvRsp(const SrvRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      addrs_(from.addrs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&sessionid_, &from.sessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:udpp2p.SrvRsp)
}

void SrvRsp::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SrvRsp_udpp2p_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionid_ = PROTOBUF_ULONGLONG(0);
  type_ = 1;
}

SrvRsp::~SrvRsp() {
  // @@protoc_insertion_point(destructor:udpp2p.SrvRsp)
  SharedDtor();
}

void SrvRsp::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SrvRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SrvRsp& SrvRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SrvRsp_udpp2p_2eproto.base);
  return *internal_default_instance();
}


void SrvRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:udpp2p.SrvRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addrs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    sessionid_ = PROTOBUF_ULONGLONG(0);
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SrvRsp::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SrvRsp*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .udpp2p.MsgType type = 1 [default = PONG];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::udpp2p::MsgType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_type(static_cast<::udpp2p::MsgType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .udpp2p.AddrTuple addrs = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::udpp2p::AddrTuple::_InternalParse;
          object = msg->add_addrs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional uint64 sessionId = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_sessionid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string message = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("udpp2p.SrvRsp.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SrvRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:udpp2p.SrvRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .udpp2p.MsgType type = 1 [default = PONG];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::udpp2p::MsgType_IsValid(value)) {
            set_type(static_cast< ::udpp2p::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .udpp2p.AddrTuple addrs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_addrs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sessionId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_sessionid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "udpp2p.SrvRsp.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:udpp2p.SrvRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:udpp2p.SrvRsp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SrvRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:udpp2p.SrvRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .udpp2p.MsgType type = 1 [default = PONG];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .udpp2p.AddrTuple addrs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addrs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->addrs(static_cast<int>(i)),
      output);
  }

  // optional uint64 sessionId = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sessionid(), output);
  }

  // optional string message = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "udpp2p.SrvRsp.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:udpp2p.SrvRsp)
}

::google::protobuf::uint8* SrvRsp::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:udpp2p.SrvRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .udpp2p.MsgType type = 1 [default = PONG];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .udpp2p.AddrTuple addrs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addrs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->addrs(static_cast<int>(i)), target);
  }

  // optional uint64 sessionId = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sessionid(), target);
  }

  // optional string message = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "udpp2p.SrvRsp.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:udpp2p.SrvRsp)
  return target;
}

size_t SrvRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:udpp2p.SrvRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .udpp2p.MsgType type = 1 [default = PONG];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .udpp2p.AddrTuple addrs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->addrs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->addrs(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint64 sessionId = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessionid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SrvRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:udpp2p.SrvRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SrvRsp* source =
      ::google::protobuf::DynamicCastToGenerated<SrvRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:udpp2p.SrvRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:udpp2p.SrvRsp)
    MergeFrom(*source);
  }
}

void SrvRsp::MergeFrom(const SrvRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:udpp2p.SrvRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addrs_.MergeFrom(from.addrs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      sessionid_ = from.sessionid_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SrvRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:udpp2p.SrvRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrvRsp::CopyFrom(const SrvRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:udpp2p.SrvRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrvRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->addrs())) return false;
  return true;
}

void SrvRsp::Swap(SrvRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SrvRsp::InternalSwap(SrvRsp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&addrs_)->InternalSwap(CastToBase(&other->addrs_));
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sessionid_, other->sessionid_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata SrvRsp::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_udpp2p_2eproto);
  return ::file_level_metadata_udpp2p_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CltReq::InitAsDefaultInstance() {
}
class CltReq::HasBitSetters {
 public:
  static void set_has_type(CltReq* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_sessionid(CltReq* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_message(CltReq* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CltReq::kTypeFieldNumber;
const int CltReq::kAddrsFieldNumber;
const int CltReq::kSessionIdFieldNumber;
const int CltReq::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CltReq::CltReq()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:udpp2p.CltReq)
}
CltReq::CltReq(const CltReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      addrs_(from.addrs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&sessionid_, &from.sessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:udpp2p.CltReq)
}

void CltReq::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CltReq_udpp2p_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&sessionid_)) + sizeof(type_));
}

CltReq::~CltReq() {
  // @@protoc_insertion_point(destructor:udpp2p.CltReq)
  SharedDtor();
}

void CltReq::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CltReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CltReq& CltReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CltReq_udpp2p_2eproto.base);
  return *internal_default_instance();
}


void CltReq::Clear() {
// @@protoc_insertion_point(message_clear_start:udpp2p.CltReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addrs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&sessionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&sessionid_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CltReq::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CltReq*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .udpp2p.MsgType type = 1 [default = PING];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::udpp2p::MsgType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_type(static_cast<::udpp2p::MsgType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .udpp2p.AddrTuple addrs = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::udpp2p::AddrTuple::_InternalParse;
          object = msg->add_addrs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional uint64 sessionId = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_sessionid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string message = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("udpp2p.CltReq.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CltReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:udpp2p.CltReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .udpp2p.MsgType type = 1 [default = PING];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::udpp2p::MsgType_IsValid(value)) {
            set_type(static_cast< ::udpp2p::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .udpp2p.AddrTuple addrs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_addrs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sessionId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_sessionid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "udpp2p.CltReq.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:udpp2p.CltReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:udpp2p.CltReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CltReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:udpp2p.CltReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .udpp2p.MsgType type = 1 [default = PING];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .udpp2p.AddrTuple addrs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addrs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->addrs(static_cast<int>(i)),
      output);
  }

  // optional uint64 sessionId = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sessionid(), output);
  }

  // optional string message = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "udpp2p.CltReq.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:udpp2p.CltReq)
}

::google::protobuf::uint8* CltReq::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:udpp2p.CltReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .udpp2p.MsgType type = 1 [default = PING];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .udpp2p.AddrTuple addrs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addrs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->addrs(static_cast<int>(i)), target);
  }

  // optional uint64 sessionId = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sessionid(), target);
  }

  // optional string message = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "udpp2p.CltReq.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:udpp2p.CltReq)
  return target;
}

size_t CltReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:udpp2p.CltReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .udpp2p.MsgType type = 1 [default = PING];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .udpp2p.AddrTuple addrs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->addrs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->addrs(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint64 sessionId = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessionid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CltReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:udpp2p.CltReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CltReq* source =
      ::google::protobuf::DynamicCastToGenerated<CltReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:udpp2p.CltReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:udpp2p.CltReq)
    MergeFrom(*source);
  }
}

void CltReq::MergeFrom(const CltReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:udpp2p.CltReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addrs_.MergeFrom(from.addrs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      sessionid_ = from.sessionid_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CltReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:udpp2p.CltReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltReq::CopyFrom(const CltReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:udpp2p.CltReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->addrs())) return false;
  return true;
}

void CltReq::Swap(CltReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CltReq::InternalSwap(CltReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&addrs_)->InternalSwap(CastToBase(&other->addrs_));
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sessionid_, other->sessionid_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata CltReq::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_udpp2p_2eproto);
  return ::file_level_metadata_udpp2p_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace udpp2p
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::udpp2p::AddrTuple* Arena::CreateMaybeMessage< ::udpp2p::AddrTuple >(Arena* arena) {
  return Arena::CreateInternal< ::udpp2p::AddrTuple >(arena);
}
template<> PROTOBUF_NOINLINE ::udpp2p::SrvRsp* Arena::CreateMaybeMessage< ::udpp2p::SrvRsp >(Arena* arena) {
  return Arena::CreateInternal< ::udpp2p::SrvRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::udpp2p::CltReq* Arena::CreateMaybeMessage< ::udpp2p::CltReq >(Arena* arena) {
  return Arena::CreateInternal< ::udpp2p::CltReq >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
